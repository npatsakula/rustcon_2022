use crate::prelude::*;
use crate::lexer::Token;

grammar<'input, 'ctx>(context: &mut Context<'input, 'ctx>);

extern {
    // LALRPOP поддерживает пользовательские ошибки
    // указать её тип можно следующим образом:
    type Error = Error;

    type Location = usize;

    enum Token<'input> {
        "float" => Token::Float(<f64>),
        "+"     => Token::Sum,
        "-"     => Token::Sub,
        "*"     => Token::Mul,
        "/"     => Token::Div,
        "("     => Token::OpenBracket,
        ")"     => Token::CloseBracket,
        ","     => Token::Comma,
        "fn"    => Token::Fn,
        "="     => Token::Eq,
        ";"     => Token::Semicolon,
        "name"  => Token::Name(<&'input str>),
    }
}

// Здесь мы определяем парсер, который разбирает список
// в скобках.
//
// Тип списка (парсер, который способен разобрать его элемент)
// передаётся аргументом `T`.
Args<T>: Vec<T> = {
    // Система макросов LALRPOP поддерживает опциональные
    // и множественные срабатывания парсера.
    //
    // Здесь (<T> ",") может срабатывать ноль и более раз,
    // а последнего элемента может не быть вовсе.
    "(" <mut args: (<T> ",")*> <last: T?> ")" => {
        if let Some(last) = last {
            args.push(last);
        }
        args
    }
}

// Здесь мы разбираем операции имеющие низкий приоритет.
ExprOp: Operation = {
    "+" => Operation::Sum,
    "-" => Operation::Sub,
}

// Здесь мы разбираем операции имеющие высокий приоритет.
FactorOp: Operation = {
    "*" => Operation::Mul,
    "/" => Operation::Div,
}

Float: f64 = "float" => <>;
Name = "name";

FunctionValue: FunctionValue<'input> = {
    Float => <>.into(),
    Name => <>.into(),
}

Term<Value>: Expression<'input, 'ctx, Value> = {
    Value => Expression::Value(<>),
    // Скобки подымают приоритет операции,
    // потому выражение в скобках имеет такой же
    // приоритет, как и значение.
    "(" <Expression<Value>> ")",
    // Здесь мы сначала разбираем имя функции, а потом
    // аргументы перечисленные в скобках.
    //
    // Аргументы не обязательно должны быть представлены
    // числами, но также могут быть представлены выражениями.
    //
    // Для получения информации о функции, которую мы пытаемся
    // вызвать, мы образаемся к контексту. Так как эта операция
    // может завершиться ошибкой, мы говорим об этом LALRPOP
    // при помощи `=>?` и в правой части возвращаем Result.
    <name:Name> <arguments:Args<Expression<Value>>> =>? {
        let call = Expression::function_call(context, name, arguments)?;
        Ok(call)
    }
}

Tier<Value, Operation, Right>: Expression<'input, 'ctx, Value> = {
    Tier<Value, Operation, Right> Operation Right => Expression::op(<>),
    Right,
}

// Операции с высоким приоритетом должны склеиваться друг с другом
// в выражение, потому правая часть от операции в Factor является числом,
// скобками или вызовом функции.
Factor<Value> = Tier<Value, FactorOp, Term<Value>>;
// Для операций с высоким приоритетом правой частью от оператора может
// выступать только операция с высоким приоритетом, выражденным случаем
// которого является числовое значение.
Expression<Value> = Tier<Value, ExprOp, Factor<Value>>;

// Парсинг функции не возвращает нам какого-то значения, а просто добавляет
// информацию о функции в контекст.
Function: () = {
    // Разбор функции также может приводить к ошибкам (использование неопределённой
    // переменной или вызов неопределённой функции). По этой причине также
    // используется `=>?`.
    "fn" <n:Name> <args: Args<Name>> "=" <expr:Expression<FunctionValue>> ";" =>? {
        let function = UserDefinedFunction::new(n, args, expr)?;
        context.add_function(n, function)?;
        Ok(())
    }
}

pub TopLevelExpression: Expression<'input, 'ctx, f64> = {
    // Пользовательский ввод может иметь ноль и более определённых функций
    // и выражение, в которых они используются:
    Function* <Expression<Float>> => <>,
}