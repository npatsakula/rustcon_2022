use std::str::FromStr;

use crate::prelude::*;
use crate::function::Context;
use crate::lexer::Token;

grammar<'input>(context: &mut Context<'input>);

extern {
    type Error = crate::prelude::Error;
    type Location = usize;

    enum Token<'input> {
        "float" => Token::Float(<f64>),
        "+"     => Token::Add,
        "-"     => Token::Subtract,
        "*"     => Token::Product,
        "/"     => Token::Divine,
        "("     => Token::OpenBracket,
        ")"     => Token::CloseBracket,
        ","     => Token::Comma,
        "fn"    => Token::Fn,
        "="     => Token::Eq,
        ";"     => Token::Semicolon,
        "name"  => Token::Name(<&'input str>),
    }
}

Args<T>: Vec<T> = {
    "(" <mut args: (<T> ",")*> <last: T?> ")" => {
        if let Some(last) = last {
            args.push(last);
        }
        args
    }
}

ExprOp: Operation = {
    "+" => Operation::Plus,
    "-" => Operation::Minus,
}

FactorOp: Operation = {
    "*" => Operation::Product,
    "/" => Operation::Division,
}

Float: f64 = "float" => <>;
Name = "name";

FunctionValue: FunctionValue<'input> = {
    Float => <>.into(),
    Name => <>.into(),
}

Term<Value> = {
    Value => Expression::Value(<>),
    "(" <Expression<Value>> ")",
}

Factor<Value>: Expression<'input, Value> = {
    Term<Value>,
    Factor<Value> FactorOp Term<Value> => Expression::op(<>),
    <name:Name> <arguments:Args<Expression<Value>>> =>? {
        let call = Expression::function_call(context, name, arguments)?;
        Ok(call)
    }
}

Expression<Value> = {
    Expression<Value> ExprOp Factor<Value> => Expression::op(<>),
    Factor<Value>,
}

Function: () = {
    "fn" <n:Name> <args: Args<Name>> "=" <expr:Expression<FunctionValue>> ";" =>? {
        let function = UserDefinedFunction::new(n, args, expr)?;
        context.add_function(n, function)?;
        Ok(())
    }
}

pub TopLevelExpression: Expression<'input, f64> = {
    Function* <Expression<Float>> => <>,
}